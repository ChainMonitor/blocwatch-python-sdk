# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blocwatch_v1.models.bitcoin_block import BitcoinBlock  # noqa: F401,E501
from blocwatch_v1.models.page import Page  # noqa: F401,E501


class ListBlocksResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'blocks': 'list[BitcoinBlock]',
        'page': 'Page'
    }

    attribute_map = {
        'blocks': 'blocks',
        'page': 'page'
    }

    def __init__(self, blocks=None, page=None):  # noqa: E501
        """ListBlocksResponse - a model defined in Swagger"""  # noqa: E501

        self._blocks = None
        self._page = None
        self.discriminator = None

        if blocks is not None:
            self.blocks = blocks
        if page is not None:
            self.page = page

    @property
    def blocks(self):
        """Gets the blocks of this ListBlocksResponse.  # noqa: E501

        The requested bitcoin blocks.  # noqa: E501

        :return: The blocks of this ListBlocksResponse.  # noqa: E501
        :rtype: list[BitcoinBlock]
        """
        return self._blocks

    @blocks.setter
    def blocks(self, blocks):
        """Sets the blocks of this ListBlocksResponse.

        The requested bitcoin blocks.  # noqa: E501

        :param blocks: The blocks of this ListBlocksResponse.  # noqa: E501
        :type: list[BitcoinBlock]
        """

        self._blocks = blocks

    @property
    def page(self):
        """Gets the page of this ListBlocksResponse.  # noqa: E501


        :return: The page of this ListBlocksResponse.  # noqa: E501
        :rtype: Page
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this ListBlocksResponse.


        :param page: The page of this ListBlocksResponse.  # noqa: E501
        :type: Page
        """

        self._page = page

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ListBlocksResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
