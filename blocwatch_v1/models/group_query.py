# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blocwatch_v1.models.bitcoin_query import BitcoinQuery  # noqa: F401,E501


class GroupQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'op': 'str',
        'queries': 'list[BitcoinQuery]'
    }

    attribute_map = {
        'op': 'op',
        'queries': 'queries'
    }

    def __init__(self, op=None, queries=None):  # noqa: E501
        """GroupQuery - a model defined in Swagger"""  # noqa: E501

        self._op = None
        self._queries = None
        self.discriminator = None

        if op is not None:
            self.op = op
        if queries is not None:
            self.queries = queries

    @property
    def op(self):
        """Gets the op of this GroupQuery.  # noqa: E501


        :return: The op of this GroupQuery.  # noqa: E501
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op):
        """Sets the op of this GroupQuery.


        :param op: The op of this GroupQuery.  # noqa: E501
        :type: str
        """
        allowed_values = ["and", "or"]  # noqa: E501
        if op not in allowed_values:
            raise ValueError(
                "Invalid value for `op` ({0}), must be one of {1}"  # noqa: E501
                .format(op, allowed_values)
            )

        self._op = op

    @property
    def queries(self):
        """Gets the queries of this GroupQuery.  # noqa: E501


        :return: The queries of this GroupQuery.  # noqa: E501
        :rtype: list[BitcoinQuery]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this GroupQuery.


        :param queries: The queries of this GroupQuery.  # noqa: E501
        :type: list[BitcoinQuery]
        """

        self._queries = queries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
