# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blocwatch_v1.models.usage_in import UsageIn  # noqa: F401,E501
from blocwatch_v1.models.usage_out import UsageOut  # noqa: F401,E501


class Usage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bitcoin_value': 'float',
        '_in': 'UsageIn',
        'multiple_signatures': 'bool',
        'out': 'UsageOut'
    }

    attribute_map = {
        'bitcoin_value': 'bitcoinValue',
        '_in': 'in',
        'multiple_signatures': 'multipleSignatures',
        'out': 'out'
    }

    def __init__(self, bitcoin_value=None, _in=None, multiple_signatures=None, out=None):  # noqa: E501
        """Usage - a model defined in Swagger"""  # noqa: E501

        self._bitcoin_value = None
        self.__in = None
        self._multiple_signatures = None
        self._out = None
        self.discriminator = None

        if bitcoin_value is not None:
            self.bitcoin_value = bitcoin_value
        if _in is not None:
            self._in = _in
        if multiple_signatures is not None:
            self.multiple_signatures = multiple_signatures
        if out is not None:
            self.out = out

    @property
    def bitcoin_value(self):
        """Gets the bitcoin_value of this Usage.  # noqa: E501


        :return: The bitcoin_value of this Usage.  # noqa: E501
        :rtype: float
        """
        return self._bitcoin_value

    @bitcoin_value.setter
    def bitcoin_value(self, bitcoin_value):
        """Sets the bitcoin_value of this Usage.


        :param bitcoin_value: The bitcoin_value of this Usage.  # noqa: E501
        :type: float
        """

        self._bitcoin_value = bitcoin_value

    @property
    def _in(self):
        """Gets the _in of this Usage.  # noqa: E501


        :return: The _in of this Usage.  # noqa: E501
        :rtype: UsageIn
        """
        return self.__in

    @_in.setter
    def _in(self, _in):
        """Sets the _in of this Usage.


        :param _in: The _in of this Usage.  # noqa: E501
        :type: UsageIn
        """

        self.__in = _in

    @property
    def multiple_signatures(self):
        """Gets the multiple_signatures of this Usage.  # noqa: E501


        :return: The multiple_signatures of this Usage.  # noqa: E501
        :rtype: bool
        """
        return self._multiple_signatures

    @multiple_signatures.setter
    def multiple_signatures(self, multiple_signatures):
        """Sets the multiple_signatures of this Usage.


        :param multiple_signatures: The multiple_signatures of this Usage.  # noqa: E501
        :type: bool
        """

        self._multiple_signatures = multiple_signatures

    @property
    def out(self):
        """Gets the out of this Usage.  # noqa: E501


        :return: The out of this Usage.  # noqa: E501
        :rtype: UsageOut
        """
        return self._out

    @out.setter
    def out(self, out):
        """Sets the out of this Usage.


        :param out: The out of this Usage.  # noqa: E501
        :type: UsageOut
        """

        self._out = out

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Usage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
