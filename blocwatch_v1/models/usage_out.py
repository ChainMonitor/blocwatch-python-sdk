# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UsageOut(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'median_time': 'datetime',
        'miner_time': 'datetime',
        'transaction_name': 'str'
    }

    attribute_map = {
        'median_time': 'medianTime',
        'miner_time': 'minerTime',
        'transaction_name': 'transactionName'
    }

    def __init__(self, median_time=None, miner_time=None, transaction_name=None):  # noqa: E501
        """UsageOut - a model defined in Swagger"""  # noqa: E501

        self._median_time = None
        self._miner_time = None
        self._transaction_name = None
        self.discriminator = None

        if median_time is not None:
            self.median_time = median_time
        if miner_time is not None:
            self.miner_time = miner_time
        if transaction_name is not None:
            self.transaction_name = transaction_name

    @property
    def median_time(self):
        """Gets the median_time of this UsageOut.  # noqa: E501


        :return: The median_time of this UsageOut.  # noqa: E501
        :rtype: datetime
        """
        return self._median_time

    @median_time.setter
    def median_time(self, median_time):
        """Sets the median_time of this UsageOut.


        :param median_time: The median_time of this UsageOut.  # noqa: E501
        :type: datetime
        """

        self._median_time = median_time

    @property
    def miner_time(self):
        """Gets the miner_time of this UsageOut.  # noqa: E501


        :return: The miner_time of this UsageOut.  # noqa: E501
        :rtype: datetime
        """
        return self._miner_time

    @miner_time.setter
    def miner_time(self, miner_time):
        """Sets the miner_time of this UsageOut.


        :param miner_time: The miner_time of this UsageOut.  # noqa: E501
        :type: datetime
        """

        self._miner_time = miner_time

    @property
    def transaction_name(self):
        """Gets the transaction_name of this UsageOut.  # noqa: E501


        :return: The transaction_name of this UsageOut.  # noqa: E501
        :rtype: str
        """
        return self._transaction_name

    @transaction_name.setter
    def transaction_name(self, transaction_name):
        """Sets the transaction_name of this UsageOut.


        :param transaction_name: The transaction_name of this UsageOut.  # noqa: E501
        :type: str
        """

        self._transaction_name = transaction_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageOut):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
