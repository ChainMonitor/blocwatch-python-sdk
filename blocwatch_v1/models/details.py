# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Details(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash': 'str',
        'hex': 'str',
        'size': 'int',
        'version': 'int',
        'vsize': 'int'
    }

    attribute_map = {
        'hash': 'hash',
        'hex': 'hex',
        'size': 'size',
        'version': 'version',
        'vsize': 'vsize'
    }

    def __init__(self, hash=None, hex=None, size=None, version=None, vsize=None):  # noqa: E501
        """Details - a model defined in Swagger"""  # noqa: E501

        self._hash = None
        self._hex = None
        self._size = None
        self._version = None
        self._vsize = None
        self.discriminator = None

        if hash is not None:
            self.hash = hash
        if hex is not None:
            self.hex = hex
        if size is not None:
            self.size = size
        if version is not None:
            self.version = version
        if vsize is not None:
            self.vsize = vsize

    @property
    def hash(self):
        """Gets the hash of this Details.  # noqa: E501


        :return: The hash of this Details.  # noqa: E501
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this Details.


        :param hash: The hash of this Details.  # noqa: E501
        :type: str
        """

        self._hash = hash

    @property
    def hex(self):
        """Gets the hex of this Details.  # noqa: E501


        :return: The hex of this Details.  # noqa: E501
        :rtype: str
        """
        return self._hex

    @hex.setter
    def hex(self, hex):
        """Sets the hex of this Details.


        :param hex: The hex of this Details.  # noqa: E501
        :type: str
        """

        self._hex = hex

    @property
    def size(self):
        """Gets the size of this Details.  # noqa: E501


        :return: The size of this Details.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Details.


        :param size: The size of this Details.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def version(self):
        """Gets the version of this Details.  # noqa: E501


        :return: The version of this Details.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Details.


        :param version: The version of this Details.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def vsize(self):
        """Gets the vsize of this Details.  # noqa: E501


        :return: The vsize of this Details.  # noqa: E501
        :rtype: int
        """
        return self._vsize

    @vsize.setter
    def vsize(self, vsize):
        """Sets the vsize of this Details.


        :param vsize: The vsize of this Details.  # noqa: E501
        :type: int
        """

        self._vsize = vsize

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Details):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
