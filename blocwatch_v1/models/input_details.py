# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InputDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'script': 'str',
        'sequence': 'int',
        'tx_witness': 'list[str]'
    }

    attribute_map = {
        'script': 'script',
        'sequence': 'sequence',
        'tx_witness': 'txWitness'
    }

    def __init__(self, script=None, sequence=None, tx_witness=None):  # noqa: E501
        """InputDetails - a model defined in Swagger"""  # noqa: E501

        self._script = None
        self._sequence = None
        self._tx_witness = None
        self.discriminator = None

        if script is not None:
            self.script = script
        if sequence is not None:
            self.sequence = sequence
        if tx_witness is not None:
            self.tx_witness = tx_witness

    @property
    def script(self):
        """Gets the script of this InputDetails.  # noqa: E501

        Unlocking script ASM used for this transaction input.  # noqa: E501

        :return: The script of this InputDetails.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this InputDetails.

        Unlocking script ASM used for this transaction input.  # noqa: E501

        :param script: The script of this InputDetails.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def sequence(self):
        """Gets the sequence of this InputDetails.  # noqa: E501


        :return: The sequence of this InputDetails.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this InputDetails.


        :param sequence: The sequence of this InputDetails.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def tx_witness(self):
        """Gets the tx_witness of this InputDetails.  # noqa: E501

        List of witnesses, one for each input if this is a SegWit transaction.  # noqa: E501

        :return: The tx_witness of this InputDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._tx_witness

    @tx_witness.setter
    def tx_witness(self, tx_witness):
        """Sets the tx_witness of this InputDetails.

        List of witnesses, one for each input if this is a SegWit transaction.  # noqa: E501

        :param tx_witness: The tx_witness of this InputDetails.  # noqa: E501
        :type: list[str]
        """

        self._tx_witness = tx_witness

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InputDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
