# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blocwatch_v1.models.details import Details  # noqa: F401,E501
from blocwatch_v1.models.summary import Summary  # noqa: F401,E501


class BitcoinTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_hash': 'str',
        'block_name': 'str',
        'details': 'Details',
        'id': 'str',
        'lock_height': 'int',
        'lock_time': 'datetime',
        'name': 'str',
        'summary': 'Summary'
    }

    attribute_map = {
        'block_hash': 'blockHash',
        'block_name': 'blockName',
        'details': 'details',
        'id': 'id',
        'lock_height': 'lockHeight',
        'lock_time': 'lockTime',
        'name': 'name',
        'summary': 'summary'
    }

    def __init__(self, block_hash=None, block_name=None, details=None, id=None, lock_height=None, lock_time=None, name=None, summary=None):  # noqa: E501
        """BitcoinTransaction - a model defined in Swagger"""  # noqa: E501

        self._block_hash = None
        self._block_name = None
        self._details = None
        self._id = None
        self._lock_height = None
        self._lock_time = None
        self._name = None
        self._summary = None
        self.discriminator = None

        if block_hash is not None:
            self.block_hash = block_hash
        if block_name is not None:
            self.block_name = block_name
        if details is not None:
            self.details = details
        if id is not None:
            self.id = id
        if lock_height is not None:
            self.lock_height = lock_height
        if lock_time is not None:
            self.lock_time = lock_time
        if name is not None:
            self.name = name
        if summary is not None:
            self.summary = summary

    @property
    def block_hash(self):
        """Gets the block_hash of this BitcoinTransaction.  # noqa: E501


        :return: The block_hash of this BitcoinTransaction.  # noqa: E501
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash):
        """Sets the block_hash of this BitcoinTransaction.


        :param block_hash: The block_hash of this BitcoinTransaction.  # noqa: E501
        :type: str
        """

        self._block_hash = block_hash

    @property
    def block_name(self):
        """Gets the block_name of this BitcoinTransaction.  # noqa: E501


        :return: The block_name of this BitcoinTransaction.  # noqa: E501
        :rtype: str
        """
        return self._block_name

    @block_name.setter
    def block_name(self, block_name):
        """Sets the block_name of this BitcoinTransaction.


        :param block_name: The block_name of this BitcoinTransaction.  # noqa: E501
        :type: str
        """

        self._block_name = block_name

    @property
    def details(self):
        """Gets the details of this BitcoinTransaction.  # noqa: E501


        :return: The details of this BitcoinTransaction.  # noqa: E501
        :rtype: Details
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BitcoinTransaction.


        :param details: The details of this BitcoinTransaction.  # noqa: E501
        :type: Details
        """

        self._details = details

    @property
    def id(self):
        """Gets the id of this BitcoinTransaction.  # noqa: E501


        :return: The id of this BitcoinTransaction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BitcoinTransaction.


        :param id: The id of this BitcoinTransaction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def lock_height(self):
        """Gets the lock_height of this BitcoinTransaction.  # noqa: E501


        :return: The lock_height of this BitcoinTransaction.  # noqa: E501
        :rtype: int
        """
        return self._lock_height

    @lock_height.setter
    def lock_height(self, lock_height):
        """Sets the lock_height of this BitcoinTransaction.


        :param lock_height: The lock_height of this BitcoinTransaction.  # noqa: E501
        :type: int
        """

        self._lock_height = lock_height

    @property
    def lock_time(self):
        """Gets the lock_time of this BitcoinTransaction.  # noqa: E501


        :return: The lock_time of this BitcoinTransaction.  # noqa: E501
        :rtype: datetime
        """
        return self._lock_time

    @lock_time.setter
    def lock_time(self, lock_time):
        """Sets the lock_time of this BitcoinTransaction.


        :param lock_time: The lock_time of this BitcoinTransaction.  # noqa: E501
        :type: datetime
        """

        self._lock_time = lock_time

    @property
    def name(self):
        """Gets the name of this BitcoinTransaction.  # noqa: E501


        :return: The name of this BitcoinTransaction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BitcoinTransaction.


        :param name: The name of this BitcoinTransaction.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def summary(self):
        """Gets the summary of this BitcoinTransaction.  # noqa: E501


        :return: The summary of this BitcoinTransaction.  # noqa: E501
        :rtype: Summary
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this BitcoinTransaction.


        :param summary: The summary of this BitcoinTransaction.  # noqa: E501
        :type: Summary
        """

        self._summary = summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BitcoinTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
