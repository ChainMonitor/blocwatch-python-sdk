# coding: utf-8

"""
    Blocwatch REST API

    The premier API for blockchain analysis  # noqa: E501

    OpenAPI spec version: v1.0.0
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GroupedSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bitcoin_value': 'float',
        'inputs_count': 'int',
        'outputs_count': 'int',
        'time': 'datetime',
        'transactions_count': 'int'
    }

    attribute_map = {
        'bitcoin_value': 'bitcoinValue',
        'inputs_count': 'inputsCount',
        'outputs_count': 'outputsCount',
        'time': 'time',
        'transactions_count': 'transactionsCount'
    }

    def __init__(self, bitcoin_value=None, inputs_count=None, outputs_count=None, time=None, transactions_count=None):  # noqa: E501
        """GroupedSummary - a model defined in Swagger"""  # noqa: E501

        self._bitcoin_value = None
        self._inputs_count = None
        self._outputs_count = None
        self._time = None
        self._transactions_count = None
        self.discriminator = None

        if bitcoin_value is not None:
            self.bitcoin_value = bitcoin_value
        if inputs_count is not None:
            self.inputs_count = inputs_count
        if outputs_count is not None:
            self.outputs_count = outputs_count
        if time is not None:
            self.time = time
        if transactions_count is not None:
            self.transactions_count = transactions_count

    @property
    def bitcoin_value(self):
        """Gets the bitcoin_value of this GroupedSummary.  # noqa: E501


        :return: The bitcoin_value of this GroupedSummary.  # noqa: E501
        :rtype: float
        """
        return self._bitcoin_value

    @bitcoin_value.setter
    def bitcoin_value(self, bitcoin_value):
        """Sets the bitcoin_value of this GroupedSummary.


        :param bitcoin_value: The bitcoin_value of this GroupedSummary.  # noqa: E501
        :type: float
        """

        self._bitcoin_value = bitcoin_value

    @property
    def inputs_count(self):
        """Gets the inputs_count of this GroupedSummary.  # noqa: E501


        :return: The inputs_count of this GroupedSummary.  # noqa: E501
        :rtype: int
        """
        return self._inputs_count

    @inputs_count.setter
    def inputs_count(self, inputs_count):
        """Sets the inputs_count of this GroupedSummary.


        :param inputs_count: The inputs_count of this GroupedSummary.  # noqa: E501
        :type: int
        """

        self._inputs_count = inputs_count

    @property
    def outputs_count(self):
        """Gets the outputs_count of this GroupedSummary.  # noqa: E501


        :return: The outputs_count of this GroupedSummary.  # noqa: E501
        :rtype: int
        """
        return self._outputs_count

    @outputs_count.setter
    def outputs_count(self, outputs_count):
        """Sets the outputs_count of this GroupedSummary.


        :param outputs_count: The outputs_count of this GroupedSummary.  # noqa: E501
        :type: int
        """

        self._outputs_count = outputs_count

    @property
    def time(self):
        """Gets the time of this GroupedSummary.  # noqa: E501


        :return: The time of this GroupedSummary.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GroupedSummary.


        :param time: The time of this GroupedSummary.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def transactions_count(self):
        """Gets the transactions_count of this GroupedSummary.  # noqa: E501


        :return: The transactions_count of this GroupedSummary.  # noqa: E501
        :rtype: int
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this GroupedSummary.


        :param transactions_count: The transactions_count of this GroupedSummary.  # noqa: E501
        :type: int
        """

        self._transactions_count = transactions_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupedSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupedSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
