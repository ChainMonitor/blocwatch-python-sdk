# coding: utf-8

"""
    Blocwatch REST API

    The premier API for blockchain analysis  # noqa: E501

    OpenAPI spec version: v1.0.0
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from blocwatch_v1.bitcoin.output_details import OutputDetails  # noqa: F401,E501


class BitcoinOutput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_names': 'list[str]',
        'bitcoin_value': 'float',
        'details': 'OutputDetails',
        'median_time': 'datetime',
        'miner_time': 'datetime',
        'name': 'str',
        'output_index': 'int',
        'transaction_name': 'str'
    }

    attribute_map = {
        'address_names': 'addressNames',
        'bitcoin_value': 'bitcoinValue',
        'details': 'details',
        'median_time': 'medianTime',
        'miner_time': 'minerTime',
        'name': 'name',
        'output_index': 'outputIndex',
        'transaction_name': 'transactionName'
    }

    def __init__(self, address_names=None, bitcoin_value=None, details=None, median_time=None, miner_time=None, name=None, output_index=None, transaction_name=None):  # noqa: E501
        """BitcoinOutput - a model defined in Swagger"""  # noqa: E501

        self._address_names = None
        self._bitcoin_value = None
        self._details = None
        self._median_time = None
        self._miner_time = None
        self._name = None
        self._output_index = None
        self._transaction_name = None
        self.discriminator = None

        if address_names is not None:
            self.address_names = address_names
        if bitcoin_value is not None:
            self.bitcoin_value = bitcoin_value
        if details is not None:
            self.details = details
        if median_time is not None:
            self.median_time = median_time
        if miner_time is not None:
            self.miner_time = miner_time
        if name is not None:
            self.name = name
        if output_index is not None:
            self.output_index = output_index
        if transaction_name is not None:
            self.transaction_name = transaction_name

    @property
    def address_names(self):
        """Gets the address_names of this BitcoinOutput.  # noqa: E501

        For standard transactions, the addresses that can unlock this output.  # noqa: E501

        :return: The address_names of this BitcoinOutput.  # noqa: E501
        :rtype: list[str]
        """
        return self._address_names

    @address_names.setter
    def address_names(self, address_names):
        """Sets the address_names of this BitcoinOutput.

        For standard transactions, the addresses that can unlock this output.  # noqa: E501

        :param address_names: The address_names of this BitcoinOutput.  # noqa: E501
        :type: list[str]
        """

        self._address_names = address_names

    @property
    def bitcoin_value(self):
        """Gets the bitcoin_value of this BitcoinOutput.  # noqa: E501

        This value of this output, in BTC.  # noqa: E501

        :return: The bitcoin_value of this BitcoinOutput.  # noqa: E501
        :rtype: float
        """
        return self._bitcoin_value

    @bitcoin_value.setter
    def bitcoin_value(self, bitcoin_value):
        """Sets the bitcoin_value of this BitcoinOutput.

        This value of this output, in BTC.  # noqa: E501

        :param bitcoin_value: The bitcoin_value of this BitcoinOutput.  # noqa: E501
        :type: float
        """

        self._bitcoin_value = bitcoin_value

    @property
    def details(self):
        """Gets the details of this BitcoinOutput.  # noqa: E501


        :return: The details of this BitcoinOutput.  # noqa: E501
        :rtype: OutputDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this BitcoinOutput.


        :param details: The details of this BitcoinOutput.  # noqa: E501
        :type: OutputDetails
        """

        self._details = details

    @property
    def median_time(self):
        """Gets the median_time of this BitcoinOutput.  # noqa: E501

        The time from the transaction that consumed this output  # noqa: E501

        :return: The median_time of this BitcoinOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._median_time

    @median_time.setter
    def median_time(self, median_time):
        """Sets the median_time of this BitcoinOutput.

        The time from the transaction that consumed this output  # noqa: E501

        :param median_time: The median_time of this BitcoinOutput.  # noqa: E501
        :type: datetime
        """

        self._median_time = median_time

    @property
    def miner_time(self):
        """Gets the miner_time of this BitcoinOutput.  # noqa: E501

        The mining time from the containing block of the transaction that consumed this output  # noqa: E501

        :return: The miner_time of this BitcoinOutput.  # noqa: E501
        :rtype: datetime
        """
        return self._miner_time

    @miner_time.setter
    def miner_time(self, miner_time):
        """Sets the miner_time of this BitcoinOutput.

        The mining time from the containing block of the transaction that consumed this output  # noqa: E501

        :param miner_time: The miner_time of this BitcoinOutput.  # noqa: E501
        :type: datetime
        """

        self._miner_time = miner_time

    @property
    def name(self):
        """Gets the name of this BitcoinOutput.  # noqa: E501

        The addressable name of this output.  # noqa: E501

        :return: The name of this BitcoinOutput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BitcoinOutput.

        The addressable name of this output.  # noqa: E501

        :param name: The name of this BitcoinOutput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def output_index(self):
        """Gets the output_index of this BitcoinOutput.  # noqa: E501

        The index of this output within the transaction.  # noqa: E501

        :return: The output_index of this BitcoinOutput.  # noqa: E501
        :rtype: int
        """
        return self._output_index

    @output_index.setter
    def output_index(self, output_index):
        """Sets the output_index of this BitcoinOutput.

        The index of this output within the transaction.  # noqa: E501

        :param output_index: The output_index of this BitcoinOutput.  # noqa: E501
        :type: int
        """

        self._output_index = output_index

    @property
    def transaction_name(self):
        """Gets the transaction_name of this BitcoinOutput.  # noqa: E501


        :return: The transaction_name of this BitcoinOutput.  # noqa: E501
        :rtype: str
        """
        return self._transaction_name

    @transaction_name.setter
    def transaction_name(self, transaction_name):
        """Sets the transaction_name of this BitcoinOutput.


        :param transaction_name: The transaction_name of this BitcoinOutput.  # noqa: E501
        :type: str
        """

        self._transaction_name = transaction_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BitcoinOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
