# coding: utf-8

"""
    Blocwatch REST API

    The premier crypto API for blockchain analysis  # noqa: E501

    OpenAPI spec version: Alpha v.0.0.1
    Contact: support@blocwatch.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from blocwatch_v1.api_client import ApiClient


class BitcoinTransactionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_transaction(self, id, **kwargs):  # noqa: E501
        """getTransaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_transaction_with_http_info(self, id, **kwargs):  # noqa: E501
        """getTransaction  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :return: GetTransactionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_input(self, id, index, **kwargs):  # noqa: E501
        """getTransactionInput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_input(id, index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param int index: index (required)
        :param list[str] include: include
        :return: GetTransactionInputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_input_with_http_info(id, index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_input_with_http_info(id, index, **kwargs)  # noqa: E501
            return data

    def get_transaction_input_with_http_info(self, id, index, **kwargs):  # noqa: E501
        """getTransactionInput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_input_with_http_info(id, index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param int index: index (required)
        :param list[str] include: include
        :return: GetTransactionInputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'index', 'include']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_input" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_transaction_input`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_transaction_input`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/{id}/inputs/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionInputResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_transaction_output(self, id, index, **kwargs):  # noqa: E501
        """getTransactionOutput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_output(id, index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param int index: index (required)
        :param list[str] include: include
        :return: GetTransactionOutputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_transaction_output_with_http_info(id, index, **kwargs)  # noqa: E501
        else:
            (data) = self.get_transaction_output_with_http_info(id, index, **kwargs)  # noqa: E501
            return data

    def get_transaction_output_with_http_info(self, id, index, **kwargs):  # noqa: E501
        """getTransactionOutput  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_transaction_output_with_http_info(id, index, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param int index: index (required)
        :param list[str] include: include
        :return: GetTransactionOutputResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'index', 'include']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_transaction_output" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_transaction_output`")  # noqa: E501
        # verify the required parameter 'index' is set
        if ('index' not in params or
                params['index'] is None):
            raise ValueError("Missing the required parameter `index` when calling `get_transaction_output`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'index' in params:
            path_params['index'] = params['index']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/{id}/outputs/{index}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetTransactionOutputResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transactions(self, **kwargs):  # noqa: E501
        """listTransactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions(async=True)
        >>> result = thread.get()

        :param async bool
        :param int confirmations_max:
        :param int confirmations_min:
        :param int height_max:
        :param int height_min:
        :param list[str] ids:
        :param list[str] include: include
        :param int inputs_max:
        :param int inputs_min:
        :param datetime max_time:
        :param datetime min_time:
        :param int outputs_max:
        :param int outputs_min:
        :param int page_limit:
        :param str page_token:
        :param list[str] payees:
        :param list[str] payers:
        :param float value_max:
        :param float value_min:
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_transactions_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_transactions_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_transactions_with_http_info(self, **kwargs):  # noqa: E501
        """listTransactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int confirmations_max:
        :param int confirmations_min:
        :param int height_max:
        :param int height_min:
        :param list[str] ids:
        :param list[str] include: include
        :param int inputs_max:
        :param int inputs_min:
        :param datetime max_time:
        :param datetime min_time:
        :param int outputs_max:
        :param int outputs_min:
        :param int page_limit:
        :param str page_token:
        :param list[str] payees:
        :param list[str] payers:
        :param float value_max:
        :param float value_min:
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['confirmations_max', 'confirmations_min', 'height_max', 'height_min', 'ids', 'include', 'inputs_max', 'inputs_min', 'max_time', 'min_time', 'outputs_max', 'outputs_min', 'page_limit', 'page_token', 'payees', 'payers', 'value_max', 'value_min']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transactions" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'confirmations_max' in params:
            query_params.append(('confirmationsMax', params['confirmations_max']))  # noqa: E501
        if 'confirmations_min' in params:
            query_params.append(('confirmationsMin', params['confirmations_min']))  # noqa: E501
        if 'height_max' in params:
            query_params.append(('heightMax', params['height_max']))  # noqa: E501
        if 'height_min' in params:
            query_params.append(('heightMin', params['height_min']))  # noqa: E501
        if 'ids' in params:
            query_params.append(('ids', params['ids']))  # noqa: E501
            collection_formats['ids'] = 'multi'  # noqa: E501
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'inputs_max' in params:
            query_params.append(('inputsMax', params['inputs_max']))  # noqa: E501
        if 'inputs_min' in params:
            query_params.append(('inputsMin', params['inputs_min']))  # noqa: E501
        if 'max_time' in params:
            query_params.append(('maxTime', params['max_time']))  # noqa: E501
        if 'min_time' in params:
            query_params.append(('minTime', params['min_time']))  # noqa: E501
        if 'outputs_max' in params:
            query_params.append(('outputsMax', params['outputs_max']))  # noqa: E501
        if 'outputs_min' in params:
            query_params.append(('outputsMin', params['outputs_min']))  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501
        if 'payees' in params:
            query_params.append(('payees', params['payees']))  # noqa: E501
            collection_formats['payees'] = 'multi'  # noqa: E501
        if 'payers' in params:
            query_params.append(('payers', params['payers']))  # noqa: E501
            collection_formats['payers'] = 'multi'  # noqa: E501
        if 'value_max' in params:
            query_params.append(('valueMax', params['value_max']))  # noqa: E501
        if 'value_min' in params:
            query_params.append(('valueMin', params['value_min']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transactions_inputs(self, id, **kwargs):  # noqa: E501
        """listTransactionsInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions_inputs(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionInputsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_transactions_inputs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transactions_inputs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_transactions_inputs_with_http_info(self, id, **kwargs):  # noqa: E501
        """listTransactionsInputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions_inputs_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionInputsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include', 'page_limit', 'page_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transactions_inputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_transactions_inputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/{id}/inputs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionInputsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_transactions_outputs(self, id, **kwargs):  # noqa: E501
        """listTransactionsOutputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions_outputs(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionOutputsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_transactions_outputs_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_transactions_outputs_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def list_transactions_outputs_with_http_info(self, id, **kwargs):  # noqa: E501
        """listTransactionsOutputs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_transactions_outputs_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: id (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionOutputsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'include', 'page_limit', 'page_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_transactions_outputs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `list_transactions_outputs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/{id}/outputs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionOutputsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_transactions(self, search_request, **kwargs):  # noqa: E501
        """searchTransactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_transactions(search_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param BitcoinSearchRequest search_request: searchRequest (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.search_transactions_with_http_info(search_request, **kwargs)  # noqa: E501
        else:
            (data) = self.search_transactions_with_http_info(search_request, **kwargs)  # noqa: E501
            return data

    def search_transactions_with_http_info(self, search_request, **kwargs):  # noqa: E501
        """searchTransactions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.search_transactions_with_http_info(search_request, async=True)
        >>> result = thread.get()

        :param async bool
        :param BitcoinSearchRequest search_request: searchRequest (required)
        :param list[str] include: include
        :param int page_limit:
        :param str page_token:
        :return: ListTransactionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search_request', 'include', 'page_limit', 'page_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_transactions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search_request' is set
        if ('search_request' not in params or
                params['search_request'] is None):
            raise ValueError("Missing the required parameter `search_request` when calling `search_transactions`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'include' in params:
            query_params.append(('include', params['include']))  # noqa: E501
            collection_formats['include'] = 'multi'  # noqa: E501
        if 'page_limit' in params:
            query_params.append(('pageLimit', params['page_limit']))  # noqa: E501
        if 'page_token' in params:
            query_params.append(('pageToken', params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'search_request' in params:
            body_params = params['search_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/bitcoin/transactions/search', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListTransactionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
